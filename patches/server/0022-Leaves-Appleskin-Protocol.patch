From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Tue, 6 Aug 2024 15:08:16 +0400
Subject: [PATCH] Leaves-Appleskin-Protocol


diff --git a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
index 5b5a2491ec297c87458cf66171f5ed4c1e41e80d..36cf79632b12c67291ccccfda7341ee543e607c6 100644
--- a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
+++ b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
@@ -37,6 +37,8 @@ public class FoldenorConfig {
     public static int activationDistanceMod;
     // Pufferfish DAB
 
+    public static boolean appleskinProtocol = false;
+
     public static void init(File configFile) {
         init(configFile, true);
     }
@@ -94,6 +96,7 @@ public class FoldenorConfig {
 
     protected static void readNetworkSettings(){
         sendNullEntityPackets = getBoolean("network.send-null-entity-packets", sendNullEntityPackets);
+        appleskinProtocol = getBoolean("network.appleskin-protocol", appleskinProtocol);
     }
 
     private static void readDynamicActivationOfBrains() throws IOException {
diff --git a/src/main/java/org/leavesmc/leaves/protocol/AppleSkinProtocol.java b/src/main/java/org/leavesmc/leaves/protocol/AppleSkinProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..a8694777f0619584c76c9cba47f7926435b768a9
--- /dev/null
+++ b/src/main/java/org/leavesmc/leaves/protocol/AppleSkinProtocol.java
@@ -0,0 +1,105 @@
+package org.leavesmc.leaves.protocol;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.food.FoodData;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.leavesmc.leaves.protocol.core.LeavesProtocol;
+import org.leavesmc.leaves.protocol.core.ProtocolHandler;
+import org.leavesmc.leaves.protocol.core.ProtocolUtils;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+@LeavesProtocol(namespace = "appleskin")
+public class AppleSkinProtocol {
+
+    public static final String PROTOCOL_ID = "appleskin";
+
+    private static final ResourceLocation SATURATION_KEY = id("saturation_sync");
+    private static final ResourceLocation EXHAUSTION_KEY = id("exhaustion_sync");
+
+    private static final Map<UUID, Float> previousSaturationLevels = new HashMap<>();
+    private static final Map<UUID, Float> previousExhaustionLevels = new HashMap<>();
+
+    private static final float MINIMUM_EXHAUSTION_CHANGE_THRESHOLD = 0.01F;
+
+    private static final Set<ServerPlayer> players = new HashSet<>();
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(String path) {
+        return new ResourceLocation(PROTOCOL_ID, path);
+    }
+
+    @ProtocolHandler.PlayerJoin
+    public static void onPlayerLoggedIn(@NotNull ServerPlayer player) {
+        if (net.edenor.foldenor.config.FoldenorConfig.appleskinProtocol) {
+            resetPlayerData(player);
+        }
+    }
+
+    @ProtocolHandler.PlayerLeave
+    public static void onPlayerLoggedOut(@NotNull ServerPlayer player) {
+        if (net.edenor.foldenor.config.FoldenorConfig.appleskinProtocol) {
+            players.remove(player);
+            resetPlayerData(player);
+        }
+    }
+
+    @ProtocolHandler.MinecraftRegister(ignoreId = true)
+    public static void onPlayerSubscribed(@NotNull ServerPlayer player) {
+        if (net.edenor.foldenor.config.FoldenorConfig.appleskinProtocol) {
+            players.add(player);
+        }
+    }
+
+    @ProtocolHandler.Ticker
+    public static void tick() {
+        if (net.edenor.foldenor.config.FoldenorConfig.appleskinProtocol) {
+            for (ServerPlayer player : players) {
+                FoodData data = player.getFoodData();
+
+                float saturation = data.getSaturationLevel();
+                Float previousSaturation = previousSaturationLevels.get(player.getUUID());
+                if (previousSaturation == null || saturation != previousSaturation) {
+                    ProtocolUtils.sendPayloadPacket(player, SATURATION_KEY, buf -> {
+                        buf.writeFloat(saturation);
+                    });
+                    previousSaturationLevels.put(player.getUUID(), saturation);
+                }
+
+                float exhaustion = data.getExhaustionLevel();
+                Float previousExhaustion = previousExhaustionLevels.get(player.getUUID());
+                if (previousExhaustion == null || Math.abs(exhaustion - previousExhaustion) >= MINIMUM_EXHAUSTION_CHANGE_THRESHOLD) {
+                    ProtocolUtils.sendPayloadPacket(player, EXHAUSTION_KEY, buf -> {
+                        buf.writeFloat(exhaustion);
+                    });
+                    previousExhaustionLevels.put(player.getUUID(), exhaustion);
+                }
+            }
+        }
+    }
+
+    @ProtocolHandler.ReloadServer
+    public static void onServerReload() {
+        if (!net.edenor.foldenor.config.FoldenorConfig.appleskinProtocol) {
+            disableAllPlayer();
+        }
+    }
+
+    public static void disableAllPlayer() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedOut(player);
+        }
+    }
+
+    private static void resetPlayerData(@NotNull ServerPlayer player) {
+        previousExhaustionLevels.remove(player.getUUID());
+        previousSaturationLevels.remove(player.getUUID());
+    }
+}
